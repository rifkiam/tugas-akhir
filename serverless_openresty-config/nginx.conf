worker_processes 1;

events {}

http {
    lua_shared_dict function_status 10m;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    server {
        listen 3000;

        location /function/fibonacci {
            access_by_lua_block {
                local http = require "resty.http"
                local json = require "cjson.safe"

                local gateway_url = "http://127.0.0.1:8080/system/functions"
                local fn_name = "fibonacci"
                local timeout = 30000
                local interval = 500
                local waited = 0

                local httpc = http.new()

                local function is_ready()
                    local res, err = httpc:request_uri(gateway_url, {
                        method = "GET"
                    })
                    if not res then
                        ngx.log(ngx.ERR, "failed to query OpenFaaS: ", err)
                        return false
                    end

                    local body = json.decode(res.body)
                    if not body then return false end

                    for _, fn in ipairs(body) do
                        if fn.name == fn_name then
                            if fn.replicas == 0 then
                                ngx.log(ngx.WARN, "No replicas, requesting scale up...")

                                local scale_res, scale_err = httpc:request_uri("http://127.0.0.1:5001/scale", {
                                    method = "POST",
                                    body = json.encode({ service = fn_name, replicas = 1 }),
                                    headers = {
                                        ["Content-Type"] = "application/json"
                                    }
                                })

                                if not scale_res then
                                    ngx.log(ngx.ERR, "Scale-up failed: ", scale_err)
                                else
                                    ngx.log(ngx.INFO, "Scale-up request sent successfully")
                                end

                                return false  -- wait for scale-up to take effect
                            end

                            return fn.replicas > 0
                        end
                    end
                    return false
                end

                while waited < timeout do
                    if is_ready() then
                        return  -- proceed to proxy_pass
                    end
                    ngx.sleep(interval / 1000)
                    waited = waited + interval
                end

                ngx.status = 503
                ngx.say("Function not ready after timeout")
                ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
            }

            proxy_pass http://127.0.0.1:8080/function/fibonacci;
        }
    }
}